@*XLSX *@
<script type="text/javascript" src="https://unpkg.com/xlsx@0.15.1/dist/xlsx.full.min.js"></script>


@{
    ViewBag.Title = "EstadoCuenta";

    GMIEntities db = new GMIEntities();
    var oUser = (Usuarios)HttpContext.Current.Session["User"];


    //Fecha del mes.

    int inicioMes = 1;

    int diaMes = DateTime.Today.Day;
    int MES = DateTime.Today.Month;
    int ANIO = DateTime.Today.Year;
    DateTime fechaInicio = DateTime.Today;
    DateTime fechaFinal = DateTime.Today;


    DateTime FECHAI = new DateTime(Convert.ToInt32(ANIO), Convert.ToInt32(MES), inicioMes);
    DateTime FECHAF = new DateTime(Convert.ToInt32(ANIO), Convert.ToInt32(MES), diaMes);
    DateTime FECHAFS = new DateTime(Convert.ToInt32(ANIO), Convert.ToInt32(MES), diaMes);
    TimeSpan difFechas = FECHAF - fechaInicio;


    //VARIABLES DE VIEWBAGS PARA FILTROS
    string canal = "";
    string referido = "";



    //VARIABLES DE TABLA
    var fechaTabla = "";
    var fechaTablaAnterior = "";
    int precioAereo = 0;
    int precioCIVA = 0;
    int precioSIVA = 0;
    int sumaPrecios = 0;
    int precioVisual = 0;
    int bucle = 0;

    //FECHA ACTUAL
    DateTime FechaAhora = DateTime.Now;

    string nombreExcel = "ESTADO DE CUENTA";


    if (ViewBag.FechaInicio != null)
    {
        fechaInicio = Convert.ToDateTime(ViewBag.FechaInicio);
        DateTime parset = fechaInicio.AddMonths(1).AddDays(-1);

        fechaFinal = parset;
        FECHAF = fechaFinal;
        FECHAFS = FECHAF;
    }

    else
    {

        fechaInicio = FECHAI;
        fechaFinal = FECHAF;
        FECHAFS = FECHAF;
        fechaFinal = fechaFinal.AddDays(1);

    }

    if (ViewBag.FechaFinal != null)
    {
        fechaFinal = Convert.ToDateTime(ViewBag.FechaFinal);
        FECHAFS = fechaFinal;
        fechaFinal = fechaFinal.AddDays(1);
    }

    else
    {

        fechaFinal = FECHAF;
        FECHAFS = FECHAF;
        fechaFinal = fechaFinal.AddDays(1);

    }



    //QUERYS TABLA REGISTROS

    var modeloNormal = db.Paciente.Join(db.Cita, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m }).
Join(db.Captura, a => a.M.idPaciente, b => b.idPaciente, (a, b) => new { A = a, B = b }).
Where(s => s.B.EstatusCaptura == "Terminado" && s.A.M.Asistencia == null && s.A.M.FechaCita >= fechaInicio && s.A.M.FechaCita <= fechaFinal
&& s.A.M.TipoTramite != "REVALORACIÓN").OrderBy(o => o.A.M.Cuenta);


    var modeloAlternativo = db.PacienteESP.
        Where(s => s.EstatusCaptura == "Terminado" && s.FechaCita >= fechaInicio && s.FechaCita <= fechaFinal
        && s.TipoTramite != "REVALORACIÓN" && s.Asistencia == null).OrderBy(o => o.Cuenta);


    var modeloExcelNormal = db.Paciente.Join(db.Cita, n => n.idPaciente, m => m.idPaciente, (n, m) => new { N = n, M = m }).
        Join(db.Captura, a => a.M.idPaciente, b => b.idPaciente, (a, b) => new { A = a, B = b }).
        Where(s => s.B.EstatusCaptura == "Terminado" && s.A.M.Asistencia == null && s.A.M.FechaCita >= fechaInicio && s.A.M.FechaCita <= fechaFinal
        && s.A.M.TipoTramite != "REVALORACIÓN").OrderBy(o => o.A.M.Cuenta);


    var modeloExcelAlternativo = db.PacienteESP.
        Where(s => s.EstatusCaptura == "Terminado" && s.FechaCita >= fechaInicio && s.FechaCita <= fechaFinal
        && s.TipoTramite != "REVALORACIÓN" && s.Asistencia == null).OrderBy(o => o.Cuenta);

    var precioEpiGeneral = db.Referido;



    //QUERYS FILTROS

    //FILTRO CANAL

    if (ViewBag.Canal != "")
    {
        canal = ViewBag.Canal;

        //MODELO DE LOS NORMALES
        modeloNormal = modeloNormal.Where(w => w.B.EstatusCaptura == "Terminado" && w.A.M.Asistencia == null && w.A.M.TipoTramite != "REVALORACIÓN"
        && w.A.M.FechaCita >= fechaInicio && w.A.M.FechaCita <= fechaFinal && w.A.M.CanalTipo.Contains(canal)).OrderBy(o => o.A.M.Cuenta);

        //MODELO ALTERNATIVOS
        modeloAlternativo = modeloAlternativo.Where(w => w.EstatusCaptura == "Terminado" && w.TipoTramite != "REVALORACIÓN"
        && w.FechaCita >= fechaInicio && w.FechaCita <= fechaFinal && w.Asistencia == null && w.CanalTipo.Contains(canal)).OrderBy(o => o.Cuenta);

        //MODELO DE EXCEL NORMALES
        modeloExcelNormal = modeloExcelNormal.Where(w => w.B.EstatusCaptura == "Terminado" && w.A.M.Asistencia == null && w.A.M.TipoTramite != "REVALORACIÓN"
        && w.A.M.FechaCita >= fechaInicio && w.A.M.FechaCita <= fechaFinal && w.A.M.CanalTipo.Contains(canal)).OrderBy(o => o.A.M.Cuenta);

        //MODELO DE EXCEL ALTERNATIVOS
        modeloExcelAlternativo = modeloExcelAlternativo.Where(w => w.EstatusCaptura == "Terminado" && w.TipoTramite != "REVALORACIÓN"
        && w.FechaCita >= fechaInicio && w.FechaCita <= fechaFinal && w.Asistencia == null && w.CanalTipo.Contains(canal)).OrderBy(o => o.Cuenta);
    }


    //FILTRO REFERIDO

    int idReferido = ViewBag.idReferido;

    if (ViewBag.Referido != "" && ViewBag.idReferido != 0)
    {
        referido = ViewBag.Referido;

        //MODELO DE LOS NORMALES
        modeloNormal = modeloNormal.Where(w => w.B.EstatusCaptura == "Terminado" && w.A.M.Asistencia == null && w.A.M.TipoTramite != "REVALORACIÓN"
        && w.A.M.FechaCita >= fechaInicio && w.A.M.FechaCita <= fechaFinal && w.A.M.ReferidoPor.Contains(referido)).OrderBy(o => o.A.M.Cuenta);

        //MODELO ALTERNATIVOS
        modeloAlternativo = modeloAlternativo.Where(w => w.EstatusCaptura == "Terminado" && w.TipoTramite != "REVALORACIÓN"
        && w.FechaCita >= fechaInicio && w.FechaCita <= fechaFinal && w.Asistencia == null && w.ReferidoPor.Contains(referido)).OrderBy(o => o.Cuenta);

        //MODELO DE EXCEL NORMALES
        modeloExcelNormal = modeloExcelNormal.Where(w => w.B.EstatusCaptura == "Terminado" && w.A.M.Asistencia == null && w.A.M.TipoTramite != "REVALORACIÓN"
        && w.A.M.FechaCita >= fechaInicio && w.A.M.FechaCita <= fechaFinal && w.A.M.ReferidoPor.Contains(referido)).OrderBy(o => o.A.M.Cuenta);

        //MODELO DE EXCEL ALTERNATIVOS
        modeloExcelAlternativo = modeloExcelAlternativo.Where(w => w.EstatusCaptura == "Terminado" && w.TipoTramite != "REVALORACIÓN"
        && w.FechaCita >= fechaInicio && w.FechaCita <= fechaFinal && w.Asistencia == null && w.ReferidoPor.Contains(referido)).OrderBy(o => o.Cuenta);

    }
}




@*Referencia estilos para ambas tablas*@

<link rel="stylesheet" type="text/css" href="~/estilos.css">


@*HEADER O ENCABEZADO*@
<br />
<h2 style="color: white"> Estado de Cuenta</h2>
<br />


@*INPUTS DE FILTROS*@
<form class="form-inline" method="post" enctype="multipart/form-data" action="@Url.Content("~/Contabilidad/EstadoCuenta")">
    <div>

        @*INPUT FILTRO CANAL*@
        <select name="canal" style="font-size:1.5vh; width: 100px" class="form-control">
            @{
                if (ViewBag.Canal == "")
                {
                    <option value="">CANAL</option>
                }
                else
                {
                    <option value="@canal">@canal.ToUpper()</option>
                }
            }
            @{
                foreach (var item in db.Canales)
                {
                    <option value="@item.NombreCanal">@item.NombreCanal</option>
                }
            }
            <option value="">TODOS</option>
        </select>


        @*INPUT FILTRO REFERIDO*@
        <select name="referido" style="font-size: 1.5vh; width: 130px" class="form-control">
            @{
                if (ViewBag.Referido == "" || ViewBag.Referido == null)
                {
                    <option value="">REFERIDO POR</option>
                }
                else
                {
                    <option value="@referido">@referido</option>
                }
            }
            @foreach (var item in db.Referido.OrderBy(o => o.Tipo).ThenBy(o => o.Nombre))
            {
                <option value="@item.idReferido">@item.Nombre -- @item.Tipo</option>
            }
            <option value="">TODOS</option>
        </select>


        @*INPUT FILTROS DE FECHA POR MES*@

        @{

            DateTime ViewBagFechaInicio = Convert.ToDateTime(ViewBag.fechaInicio);
            var SetFechaInicio = ViewBagFechaInicio.Date.ToString("yyyy-MM");

            if (ViewBag.fechaInicio != null)
            {

                <input type="month" name="fechaInicio" class="form-control" value="@SetFechaInicio" style="width: 160px;" />

            }

            else

            {

                <input type="month" name="fechaInicio" class="form-control" value="" style="width: 160px;" />

            }

        }

        @{

            DateTime ViewBagFechaFinal = Convert.ToDateTime(ViewBag.fechaFinal);
            var SetFechaFinal = ViewBagFechaFinal.Date.ToString("yyyy-MM-dd");

            if (ViewBag.fechaFinal != null)
            {

                <input type="hidden" name="fechaFinal" class="form-control" value="@SetFechaFinal" style="width: 160px;" />

            }

            else

            {

                <input type="hidden" name="fechaFinal" class="form-control" value="" style="width: 160px;" />

            }

        }
        <input type="submit" class="btn btn-info" value="Enviar" />

        <a href="~/Contabilidad/EstadoCuenta">
            <span type="button" class="btn btn-success">Limpiar</span>
        </a>

    </div>
</form>


@*EXPORTAR PDF Y REGRESO A PAGOS*@
<script>
    function ExportToExcel(type, fn, dl)
    {
        var elt = document.getElementById('tbl_exporttable_to_xls');
        var wb = XLSX.utils.table_to_book(elt, { sheet: "sheet1" });
        return dl ?
            XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }) :
            XLSX.writeFile(wb, fn || ('@nombreExcel' + ' del @Convert.ToDateTime(fechaInicio).ToString("dd-MM-yy")' + ' al @Convert.ToDateTime(fechaFinal).AddDays(-1).ToString("dd-MM-yy").' + (type || 'xlsx')));
    }
</script>



|   <div>
    <a href="~/Contabilidad/Pagos">
        <span type="button" class="btn btn-success" style="background-color:dodgerblue">Regresar a Control de Pagos</span>
    </a>
    @*<button style="background-color:limegreen" class="btn btn-info dropdown-toggle" onclick="ExportToExcel('xlsx')">Descargar reporte </button>*@
</div>
<br />



@*TABLA INICIAL/ TABLA QUE DICE ALTERNATIVOS/ENCABEZADOS DE LAS DEMAS TABLAS*@
<div>
    <table>
        <thead>
            <tr>
                <th style="background-color: dodgerblue;" colspan="2"></th>
                <th style="background-color: dodgerblue; " colspan="2">ALTERNATIVOS</th>
                <th style="background-color: dodgerblue; " colspan="2"></th>
            </tr>
            <tr>
                <th style="background-color: yellow;" scope="col">Fecha</th>
                <th style="background-color: yellow;" scope="col">Epis P</th>
                <th style="background-color: yellow;" scope="col">Importe</th>
                <th style="background-color: yellow;" scope="col">Epis</th>
                <th style="background-color: yellow;" scope="col">Importe</th>
                <th style="background-color: yellow;" scope="col">Banco/Efectivo</th>
            </tr>
        </thead>
    </table>
</div>
<br>



@*TABLA PRIMERA SECCION PAGOS SALDO POR MES ANTERIOR*@


@{

    if (canal != "IN SITU" && canal != "GESTOR ALT" && canal != null && canal != "")
    {
        <table cellpadding="0" cellspacing="0" class="table  table-hover tablas table-bordered" style="color: #2F2D6B">
            <thead style="color:white">
                <tr>
                    <th style="background-color: gray;" colspan="2"></th>
                    <th style="background-color: gray; " colspan="2">Pagos a Saldo al mes de @fechaInicio.AddMonths(-1).ToString("MMMM")</th>
                    <th style="background-color: gray; " colspan="2"></th>
                </tr>
            </thead>
            <tbody>

                @{
                    foreach (var item in modeloNormal.OrderBy(q => q.A.M.FechaCita))
                    {
                        fechaTabla = Convert.ToDateTime(item.A.M.FechaCita).ToString("dd-MMMM-yy");
                        var parseFechaInicial = DateTime.Parse(fechaTabla);
                        var parseFechaFinal = DateTime.Parse(fechaTabla).AddHours(23);
                        int conteoEpis = (from i in modeloNormal where i.A.M.FechaCita >= parseFechaInicial && i.A.M.FechaCita <= parseFechaFinal select i).Count();
                        bucle = conteoEpis;

                        //DIFERENCIAR PRECIOS

                        if (item.A.M.TipoLicencia == "AEREO")
                        {
                            var precioEpi = (from i in precioEpiGeneral where i.Nombre == item.A.M.ReferidoPor && i.Tipo == item.A.M.CanalTipo select i);

                            foreach (var precios in precioEpi)
                            {
                                precioAereo = Convert.ToInt32(precios.PrecioAereo);
                            }

                        }

                        else if (item.A.M.TipoLicencia != "AEREO")
                        {
                            var precioEpi = (from i in precioEpiGeneral where i.Nombre == item.A.M.ReferidoPor && i.Tipo == item.A.M.CanalTipo select i);

                            foreach (var precios in precioEpi)
                            {

                                if (precios.PrecioNormalconIVA != "0" && precios.PrecioNormalconIVA != null)
                                {
                                    precioCIVA = Convert.ToInt32(precios.PrecioNormalconIVA);
                                }
                                else
                                {
                                    precioSIVA = Convert.ToInt32(precios.PrecioNormal);
                                }
                            }

                            sumaPrecios = precioAereo + precioCIVA + precioSIVA;

                            for ( int i= 0; i < bucle; i++)
                            {
                                precioVisual += sumaPrecios;
                            }
                        }

                        if (fechaTablaAnterior != fechaTabla)
                        {
                            <tr>

                                @*FECHA DE CITA*@
                                <td>
                                    <span>@fechaTabla</span>
                                </td>

                                @*NUMERO DE EPIS X DIA EN FECHA*@
                                <td>
                                        <span>@conteoEpis</span>                               
                                </td>

                                @*IMPORTE*@
                                 <td>                                  
                                     <span>$@precioVisual.ToString("###,###,###,###")</span>    
                                 </td>
                            </tr>
                        }
                        fechaTablaAnterior = fechaTabla;
                        precioVisual = 0;
                        precioAereo = 0;
                        precioSIVA = 0;
                        precioCIVA = 0;
                        bucle = 0;
                    }
                }
            </tbody>
        </table>
    }

    else if (canal == "IN SITU" || canal == "GESTOR ALT")
    { 
                    
    }
}